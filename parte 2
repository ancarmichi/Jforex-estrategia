/**
 * Módulo de configuración para la estrategia de trading en JForex.
 * Implementa el patrón Singleton para garantizar una única instancia de configuración.
 * Esta clase es thread-safe y proporciona protección contra instanciación mediante
 * reflexión y serialización.
 *
 * @author TradingStrategy
 * @version 1.0
 * @since 1.0
 */
public final class ConfigurationModule implements Serializable {
    private static final long serialVersionUID = 1L;
    private static final String INSTANCE_EXISTS_ERROR = 
        "Ya existe una instancia de ConfigurationModule";

    private static volatile ConfigurationModule instance;

    /**
     * Constructor privado para prevenir instanciación directa.
     * Incluye protección contra reflexión.
     *
     * @throws IllegalStateException si ya existe una instancia
     */
    private ConfigurationModule() {
        if (instance != null) {
            throw new IllegalStateException(INSTANCE_EXISTS_ERROR);
        }
    }

    /**
     * Obtiene la instancia única de ConfigurationModule.
     * Implementa el patrón Singleton con doble verificación de bloqueo
     * para garantizar la seguridad en entornos multi-hilo.
     *
     * @return la única instancia de ConfigurationModule
     */
    public static ConfigurationModule getInstance() {
        if (instance == null) {
            synchronized (ConfigurationModule.class) {
                if (instance == null) {
                    instance = new ConfigurationModule();
                }
            }
        }
        return instance;
    }

    /**
     * Protege contra deserialización múltiple.
     *
     * @return la instancia singleton existente
     */
    private Object readResolve() {
        return instance;
    }
}
import java.util.*;

/**
 * Configuración para la estrategia de trading en JForex.
 */
public final class ConfigurationModule implements Serializable {
    private static final long serialVersionUID = 1L;
    
    /** Niveles de log válidos para la aplicación */
    private static final Set<String> VALID_LOG_LEVELS = 
        Collections.unmodifiableSet(new HashSet<>(Arrays.asList(
            "DEBUG", "INFO", "WARN", "ERROR"
        )));

    /** 
     * Ruta del directorio compartido para la comunicación entre JForex y MT4.
     * Debe estar ubicado en una unidad SSD.
     */
    private String sharedDirectoryPath = "";
    
    /** 
     * Lista de identificadores de EA (Expert Advisors).
     * Cada identificador debe ser único y se usa para generar nombres de archivo.
     */
    private List<String> eaIdentifiers = new ArrayList<>();
    
    /** 
     * Nivel de logging para la estrategia.
     * Valores válidos: DEBUG, INFO, WARN, ERROR
     */
    private String logLevel = "INFO";
    
    /** Coordenada X para la posición del botón "Ajustar" */
    private int buttonPositionX = 100;
    
    /** Coordenada Y para la posición del botón "Ajustar" */
    private int buttonPositionY = 100;
    
    /** Coordenada X para la posición del botón "Activar" */
    private int activateButtonPositionX = 200;
    
    /** Coordenada Y para la posición del botón "Activar" */
    private int activateButtonPositionY = 100;

    // ... Constructor y getInstance() de la parte 1.1 ...

    /**
     * Obtiene la ruta del directorio compartido usado para la comunicación
     * entre JForex y los EAs de MT4.
     *
     * @return la ruta absoluta del directorio compartido
     * @see #setSharedDirectoryPath(String)
     */
    public synchronized String getSharedDirectoryPath() {
        return sharedDirectoryPath;
    }

    /**
     * Obtiene una copia inmutable de la lista de identificadores de EA.
     * Los cambios en la lista retornada no afectarán la configuración.
     *
     * @return lista inmutable de identificadores de EA
     */
    public synchronized List<String> getEaIdentifiers() {
        return Collections.unmodifiableList(new ArrayList<>(eaIdentifiers));
    }

    // ... resto de getters con sincronización y documentación mejorada ...
}
/**
   public final class ConfigurationModule implements Serializable {
    // ... código anterior ...

    /**
     * Establece la ruta del directorio compartido.
     * La ruta debe ser válida y accesible.
     *
     * @param sharedDirectoryPath nueva ruta del directorio compartido
     * @throws IllegalArgumentException si la ruta es null o vacía
     */
    public synchronized void setSharedDirectoryPath(String sharedDirectoryPath) {
        if (sharedDirectoryPath == null || sharedDirectoryPath.trim().isEmpty()) {
            throw new IllegalArgumentException("La ruta del directorio no puede ser null o vacía");
        }
        this.sharedDirectoryPath = sharedDirectoryPath.trim();
    }

    /**
     * Establece el nivel de logging para la estrategia.
     *
     * @param logLevel nuevo nivel de logging (DEBUG, INFO, WARN, ERROR)
     * @throws IllegalArgumentException si el nivel no es válido
     */
    public synchronized void setLogLevel(String logLevel) {
        if (logLevel == null || !VALID_LOG_LEVELS.contains(logLevel.toUpperCase())) {
            throw new IllegalArgumentException("Nivel de log inválido. Debe ser: DEBUG, INFO, WARN o ERROR");
        }
        this.logLevel = logLevel.toUpperCase();
    }

    /**
     * Establece la coordenada X del botón principal.
     * El valor debe ser no negativo.
     *
     * @param buttonPositionX nueva posición X del botón
     * @throws IllegalArgumentException si la posición es negativa
     * @see #getButtonPositionX()
     */
    public synchronized void setButtonPositionX(int buttonPositionX) {
        if (buttonPositionX < 0) {
            throw new IllegalArgumentException("La posición X no puede ser negativa");
        }
        this.buttonPositionX = buttonPositionX;
    }

    // ... Implementar el resto de setters con validaciones similares ...
}
import java.io.*;
import java.util.*;
import com.example.logging.Logger;

    /** Nombre del archivo de configuración */
    private static final String CONFIG_FILE_NAME = "config.properties";
    
    /** Valores por defecto para las propiedades */
    private static final String DEFAULT_SHARED_DIRECTORY = "";
    private static final String DEFAULT_EA_IDENTIFIERS = "EA1,EA2";
    private static final String DEFAULT_LOG_LEVEL = "INFO";
    private static final int DEFAULT_BUTTON_X = 100;
    private static final int DEFAULT_BUTTON_Y = 100;
    private static final int DEFAULT_ACTIVATE_BUTTON_X = 200;
    private static final int DEFAULT_ACTIVATE_BUTTON_Y = 100;

    /**
     * Carga las propiedades desde el archivo de configuración.
     * Si el archivo no existe, lo crea con valores por defecto.
     */
    private void loadProperties() {
        Properties props = new Properties();
        File configFile = new File(CONFIG_FILE_NAME);

        try {
            if (!configFile.exists()) {
                configFile.createNewFile();
            }

            try (FileInputStream fis = new FileInputStream(configFile)) {
                props.load(fis);
            }

            // Cargar sharedDirectoryPath
            sharedDirectoryPath = props.getProperty("sharedDirectoryPath", DEFAULT_SHARED_DIRECTORY);

            // Cargar y validar logLevel
            String loadedLogLevel = props.getProperty("logLevel", DEFAULT_LOG_LEVEL).toUpperCase();
            if (!VALID_LOG_LEVELS.contains(loadedLogLevel)) {
                Logger.warn("Nivel de log inválido en configuración: " + loadedLogLevel + ". Usando valor por defecto: INFO");
                logLevel = DEFAULT_LOG_LEVEL;
            } else {
                logLevel = loadedLogLevel;
            }

            // Cargar eaIdentifiers
            String eaIdentifiersStr = props.getProperty("eaIdentifiers", DEFAULT_EA_IDENTIFIERS);
            eaIdentifiers = new ArrayList<>(Arrays.asList(eaIdentifiersStr.split(",")));

            // Cargar posiciones de botones con manejo de errores de parsing
            try {
                buttonPositionX = Integer.parseInt(props.getProperty("buttonPositionX", String.valueOf(DEFAULT_BUTTON_X)));
            } catch (NumberFormatException e) {
                buttonPositionX = DEFAULT_BUTTON_X;
                Logger.warn("Error al parsear buttonPositionX, usando valor por defecto: " + DEFAULT_BUTTON_X);
            }

            try {
                buttonPositionY = Integer.parseInt(props.getProperty("buttonPositionY", String.valueOf(DEFAULT_BUTTON_Y)));
            } catch (NumberFormatException e) {
                buttonPositionY = DEFAULT_BUTTON_Y;
                Logger.warn("Error al parsear buttonPositionY, usando valor por defecto: " + DEFAULT_BUTTON_Y);
            }

            try {
                activateButtonPositionX = Integer.parseInt(props.getProperty("activateButtonPositionX", 
                    String.valueOf(DEFAULT_ACTIVATE_BUTTON_X)));
            } catch (NumberFormatException e) {
                activateButtonPositionX = DEFAULT_ACTIVATE_BUTTON_X;
                Logger.warn("Error al parsear activateButtonPositionX, usando valor por defecto: " + DEFAULT_ACTIVATE_BUTTON_X);
            }

            try {
                activateButtonPositionY = Integer.parseInt(props.getProperty("activateButtonPositionY", 
                    String.valueOf(DEFAULT_ACTIVATE_BUTTON_Y)));
            } catch (NumberFormatException e) {
                activateButtonPositionY = DEFAULT_ACTIVATE_BUTTON_Y;
                Logger.warn("Error al parsear activateButtonPositionY, usando valor por defecto: " + DEFAULT_ACTIVATE_BUTTON_Y);
            }

        } catch (IOException e) {
            Logger.error("Error al leer el archivo de configuración", e);
            // Establecer valores por defecto en caso de error
            setDefaultValues();
        }
    }

    /**
     * Establece los valores por defecto para todas las propiedades.
     */
    private void setDefaultValues() {
        sharedDirectoryPath = DEFAULT_SHARED_DIRECTORY;
        eaIdentifiers = new ArrayList<>(Arrays.asList(DEFAULT_EA_IDENTIFIERS.split(",")));
        logLevel = DEFAULT_LOG_LEVEL;
        buttonPositionX = DEFAULT_BUTTON_X;
        buttonPositionY = DEFAULT_BUTTON_Y;
        activateButtonPositionX = DEFAULT_ACTIVATE_BUTTON_X;
        activateButtonPositionY = DEFAULT_ACTIVATE_BUTTON_Y;
    }

    // Modificación del constructor para incluir la carga de propiedades
    private ConfigurationModule() {
        if (instance != null) {
            throw new IllegalStateException(INSTANCE_EXISTS_ERROR);
        }
        loadProperties();
    }
/**
   public final class ConfigurationModule implements Serializable {
    // ... código anterior ...

    private void validatePosition(int position, String fieldName) {
        if (position < 0) {
            throw new IllegalArgumentException(
                String.format("La posición %s no puede ser negativa", fieldName));
        }
    }

    private synchronized void saveProperties() {
        Properties props = new Properties();
        populateProperties(props);
        
        Path tempFile = CONFIG_FILE_PATH.resolveSibling(CONFIG_FILE_NAME + ".tmp");
        try {
            try (OutputStream os = Files.newOutputStream(tempFile)) {
                props.store(os, "Configuración de la estrategia de trading");
            }
            Files.move(tempFile, CONFIG_FILE_PATH, 
                      StandardCopyOption.REPLACE_EXISTING,
                      StandardCopyOption.ATOMIC_MOVE);
        } catch (IOException e) {
            Logger.error("Error al escribir el archivo de configuración", e);
            try {
                Files.deleteIfExists(tempFile);
            } catch (IOException deleteError) {
                Logger.error("Error al eliminar archivo temporal", deleteError);
            }
        }
    }

    private void populateProperties(Properties props) {
        props.setProperty("sharedDirectoryPath", sharedDirectoryPath);
        props.setProperty("eaIdentifiers", String.join(",", eaIdentifiers));
        props.setProperty("logLevel", logLevel);
        props.setProperty("buttonPositionX", String.valueOf(buttonPositionX));
        props.setProperty("buttonPositionY", String.valueOf(buttonPositionY));
        props.setProperty("activateButtonPositionX", String.valueOf(activateButtonPositionX));
        props.setProperty("activateButtonPositionY", String.valueOf(activateButtonPositionY));
    }

    // ... setters modificados usando las nuevas utilidades ...
}
